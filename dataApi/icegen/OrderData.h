// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `OrderData.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __OrderData_h__
#define __OrderData_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace DataIceApi
{

struct OrderData
{
    ::std::string Symbol;
    ::std::string Side;
    ::std::string OrderId;
    ::std::string OrderType;
    float Quantity;
    float Price;

    std::tuple<const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const float&, const float&> ice_tuple() const
    {
        return std::tie(Symbol, Side, OrderId, OrderType, Quantity, Price);
    }
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace Ice
{

template<>
struct StreamableTraits<::DataIceApi::OrderData>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 12;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::DataIceApi::OrderData, S>
{
    static void read(S* istr, ::DataIceApi::OrderData& v)
    {
        istr->readAll(v.Symbol, v.Side, v.OrderId, v.OrderType, v.Quantity, v.Price);
    }
};

}

#else // C++98 mapping

namespace DataIceApi
{

struct OrderData
{
    ::std::string Symbol;
    ::std::string Side;
    ::std::string OrderId;
    ::std::string OrderType;
    ::Ice::Float Quantity;
    ::Ice::Float Price;
};

}

namespace Ice
{

template<>
struct StreamableTraits< ::DataIceApi::OrderData>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 12;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::DataIceApi::OrderData, S>
{
    static void write(S* ostr, const ::DataIceApi::OrderData& v)
    {
        ostr->write(v.Symbol);
        ostr->write(v.Side);
        ostr->write(v.OrderId);
        ostr->write(v.OrderType);
        ostr->write(v.Quantity);
        ostr->write(v.Price);
    }
};

template<typename S>
struct StreamReader< ::DataIceApi::OrderData, S>
{
    static void read(S* istr, ::DataIceApi::OrderData& v)
    {
        istr->read(v.Symbol);
        istr->read(v.Side);
        istr->read(v.OrderId);
        istr->read(v.OrderType);
        istr->read(v.Quantity);
        istr->read(v.Price);
    }
};

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
