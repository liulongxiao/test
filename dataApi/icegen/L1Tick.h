// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `L1Tick.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
#define __L1Tick_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace DataIceApi
{

struct L1Tick
{
    ::std::string Symbol;
    ::std::string time;
    float lastPrice;
    float ask1Price;
    float bid1Price;
    float Volume;
    float ask1Volume;
    float bid1Volume;

    std::tuple<const ::std::string&, const ::std::string&, const float&, const float&, const float&, const float&, const float&, const float&> ice_tuple() const
    {
        return std::tie(Symbol, time, lastPrice, ask1Price, bid1Price, Volume, ask1Volume, bid1Volume);
    }
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace Ice
{

template<>
struct StreamableTraits<::DataIceApi::L1Tick>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 26;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::DataIceApi::L1Tick, S>
{
    static void read(S* istr, ::DataIceApi::L1Tick& v)
    {
        istr->readAll(v.Symbol, v.time, v.lastPrice, v.ask1Price, v.bid1Price, v.Volume, v.ask1Volume, v.bid1Volume);
    }
};

}

#else // C++98 mapping

namespace DataIceApi
{

struct L1Tick
{
    ::std::string Symbol;
    ::std::string time;
    ::Ice::Float lastPrice;
    ::Ice::Float ask1Price;
    ::Ice::Float bid1Price;
    ::Ice::Float Volume;
    ::Ice::Float ask1Volume;
    ::Ice::Float bid1Volume;
};

}

namespace Ice
{

template<>
struct StreamableTraits< ::DataIceApi::L1Tick>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 26;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::DataIceApi::L1Tick, S>
{
    static void write(S* ostr, const ::DataIceApi::L1Tick& v)
    {
        ostr->write(v.Symbol);
        ostr->write(v.time);
        ostr->write(v.lastPrice);
        ostr->write(v.ask1Price);
        ostr->write(v.bid1Price);
        ostr->write(v.Volume);
        ostr->write(v.ask1Volume);
        ostr->write(v.bid1Volume);
    }
};

template<typename S>
struct StreamReader< ::DataIceApi::L1Tick, S>
{
    static void read(S* istr, ::DataIceApi::L1Tick& v)
    {
        istr->read(v.Symbol);
        istr->read(v.time);
        istr->read(v.lastPrice);
        istr->read(v.ask1Price);
        istr->read(v.bid1Price);
        istr->read(v.Volume);
        istr->read(v.ask1Volume);
        istr->read(v.bid1Volume);
    }
};

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
